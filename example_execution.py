from ntru import Ntru


def char_to_binary_list(char):
    # Convert character to binary string
    binary_str = bin(ord(char))[2:]

    # Calculate the number of zero-padding needed
    padding_len = 8 - len(binary_str)

    # Create a list with zero-padding
    binary_list = [0] * padding_len + [int(bit) for bit in binary_str]

    return binary_list
# Bob
print("Bob Will Generate his Public Key using Parameters")
print("N = 7, p = 29 and q = 491531")
Bob = Ntru(11, 3, 32)
f = [-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1]
g = [-1, 1, 1, 1, 0, 0, 0, 0, -1, 0, -1]
d = 7
print("f(x)= ", f)
print("g(x)= ", g)
print("d   = ", d)
Bob.genPublicKey(f, g, 2)
pub_key = Bob.getPublicKey()
print("Public Key Generated by Bob: ", pub_key)
print("\n-------------------------------------------------\n")

# Alice
Alice = Ntru(11, 3, 32)
Alice.setPublicKey(pub_key)
msg = []

# number of elemetns as input
# n = int(input("Enter number of elements : "))

# # iterating till the range
# for i in range(0, n):
#     ele = int(input())
#     msg.append(ele)  # adding the element

msg = [0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0]
print("Alice's Original Message   : ", msg)

r = [1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0] # random polynomial to obscure the message
print("Alice's Random Polynomial  : ", r)

encrypt_msg = Alice.encrypt(msg, r)
print("Encrypted Message          : ", encrypt_msg)
print("\n-------------------------------------------------\n")

# BOB
print("Bob decrypts message sent to him")
print("Decrypted Message          : ", Bob.decrypt(encrypt_msg))
